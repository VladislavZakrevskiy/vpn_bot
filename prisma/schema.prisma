generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id                       String   @id @unique @default(uuid()) @db.Uuid
  admin_proxy_path         String
  user_proxy_path          String
  crypto_types             String[]
  max_sert                 Int      @default(3)
  admin_command            String[] @default(["admin"])
  is_cart_enable           Boolean  @default(true)
  is_star_enable           Boolean  @default(true)
  is_crypto_enable         Boolean  @default(true)
  tp_hello_message         String   @default("Привет")
  tp_close_support_message String   @default("Конец саппорт")
  tp_close_user_message    String   @default("Конец юзер")
}

model User {
  id              String     @id @unique @default(uuid()) @db.Uuid
  tg_id           String     @unique
  role            Role       @default(USER)
  vpn_uuid        String
  is_active       Boolean
  was_trial       Boolean    @default(false)
  purchases       Purchase[]
  support_tickets Ticket[]   @relation(name: "support")
  user_tickets    Ticket[]   @relation(name: "user")
  messages        Message[]
}

model Ticket {
  id           String    @id @default(uuid()) @db.Uuid
  status       Status
  created_at   DateTime  @default(now())
  messages     Message[]
  supporter_id String    @db.Uuid
  user_id      String    @db.Uuid
  supporter    User      @relation(fields: [supporter_id], references: [id], name: "support")
  user         User      @relation(fields: [user_id], references: [id], name: "user")
  tags         Tag[]
}

model Message {
  id         String      @id @default(uuid()) @db.Uuid
  text       String
  type       MessageType
  created_at DateTime    @default(now())
  sended     Boolean

  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  ticket_id String @db.Uuid
  ticket    Ticket @relation(fields: [ticket_id], references: [id])
}

model Purchase {
  id        String  @id @unique @default(uuid()) @db.Uuid
  user_id   String  @db.Uuid
  user      User    @relation(fields: [user_id], references: [id])
  rate_id   String  @db.Uuid
  rate      Rate    @relation(fields: [rate_id], references: [id])
  vpn_token String?
  hash      String?

  purchase_date DateTime
  amount        Int
  currency      Currency
  active        Boolean
}

model Rate {
  id          String     @id @unique @default(uuid()) @db.Uuid
  name        String
  description String
  price       Int
  price_XTR   Int
  GB_limit    Int
  max_devices Int
  MB_speed    Int
  expiresIn   Int
  purchases   Purchase[]
}

model Tag {
  id      String   @id @default(uuid()) @db.Uuid
  value   String
  tickets Ticket[]
}

enum Status {
  OPEN
  CLOSE
}

enum MessageType {
  TEXT
  CLOSE
}

enum Currency {
  RUB
  STARS
  CRYPTO
}

enum Role {
  ADMIN
  SUPPORT
  USER
}
